FROM python:3.9-slim-bullseye AS builder

# Parallelize Rust/C extensions build
ENV CARGO_BUILD_JOBS=4

# Install build dependencies + coreutils (for timeout)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      build-essential python3-dev gcc libffi-dev \
      curl libssl-dev pkg-config \
      portaudio19-dev libasound2-dev cmake coreutils && \
    rm -rf /var/lib/apt/lists/*

# Install Rust toolchain
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

WORKDIR /build
COPY requirements.txt .

# Upgrade pip & setuptools and then build wheels
RUN pip install --upgrade pip setuptools wheel

# Run cryptography build with a 60-minute timeout
RUN timeout 3600 pip wheel --no-deps --no-cache-dir --wheel-dir /wheels \
    cffi setuptools-rust cryptography==44.0.0

# Build remaining dependencies
RUN pip wheel --no-deps --no-cache-dir --wheel-dir /wheels -r requirements.txt

# Final stage: copy wheels and install
FROM python:3.9-slim-bullseye

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      arp-scan iputils-ping netcat-openbsd \
      portaudio19-dev libasound2-dev && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY --from=builder /wheels /wheels
COPY . .

RUN pip install --no-index --find-links=/wheels -r requirements.txt \
    && rm -rf /wheels

EXPOSE 4000
VOLUME /app/data

CMD ["gunicorn", "-k", "eventlet", "-w", "1", "-b", "0.0.0.0:4000", "movie_selector:app"]

